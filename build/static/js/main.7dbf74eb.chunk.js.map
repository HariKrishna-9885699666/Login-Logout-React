{"version":3,"sources":["validations/validations.js","components/Login/LogIn.js","components/DashBoard/DashBoard.js","components/Register/Register.js","ProtectedRoute.js","App.js","serviceWorker.js","index.js"],"names":["validateName","value","field","test","validatePassword","length","LogIn","props","state","submit","initialValues","userName","password","validate","values","errors","key","onSubmit","actions","setSubmitting","userObj","localStorage","getItem","localUname","JSON","parse","localUpwd","base64","decode","isUserLoggedIn","setItem","stringify","setState","ToastsStore","error","handleSubmit","className","touched","type","placeholder","name","onChange","handleChange","onBlur","handleBlur","to","pathname","store","position","ToastsContainerPosition","TOP_RIGHT","React","Component","_","require","DashBoard","onLogoutYes","toggle","get","loggedInUserObj","onLogout","confirmAlert","title","message","buttons","label","onClick","alert","username","board","boardItem","change","loggedInUserName","this","location","style","backgroundColor","color","float","Register","firstName","lastName","encode","success","resetForm","disabled","ProtectedRoute","component","rest","render","userNameKey","App","path","exact","Boolean","window","hostname","match","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7dbf74eb.chunk.js","sourcesContent":["const validateName = (value, field) => {\n  if (!value) {\n    return \"Required\";\n  } else if (!/^[A-Za-z]+$/i.test(value)) {\n    return `Invalid ${field}`;\n  }\n};\nconst validatePassword = (value) => {\n  if (!value) {\n    return \"Required\";\n  } else if (value.length > 6 || value.length < 6) {\n    return \"6 characters only allowed\";\n  }\n};\n\nexport default validateName;\n\nexport { validateName, validatePassword };\n","import React from \"react\";\nimport {\n  ToastsContainer,\n  ToastsStore,\n  ToastsContainerPosition,\n} from \"react-toasts\";\nimport { Redirect, Link } from \"react-router-dom\";\nimport base64 from \"react-native-base64\";\nimport { Formik } from \"formik\";\nimport \"./Login.css\";\nimport { validateName, validatePassword } from \"../../validations/validations\";\n\nclass LogIn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      submit: false,\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Formik\n          initialValues={{\n            userName: \"\",\n            password: \"\",\n          }}\n          validate={(values) => {\n            const errors = {};\n\n            errors.userName = validateName(values.userName) || null;\n            errors.password = validatePassword(values.password) || null;\n\n            for (var key in errors) {\n              if (errors[key] !== null) return errors;\n            }\n            return true;\n          }}\n          onSubmit={(values, actions) => {\n            actions.setSubmitting(false);\n            let userObj = localStorage.getItem(values.userName);\n            if (!userObj) {\n              ToastsStore.error(\"Invalid Username/Password.\");\n            } else {\n              userObj = JSON.parse(userObj);\n              const localUname = (userObj && userObj.userName) || null;\n              const localUpwd =\n                (userObj && base64.decode(userObj.password)) || null;\n\n              if (\n                values.userName === localUname &&\n                values.password === localUpwd\n              ) {\n                userObj.isUserLoggedIn = true;\n                localStorage.setItem(values.userName, JSON.stringify(userObj));\n                this.setState({ submit: true });\n              } else {\n                ToastsStore.error(\"Invalid Username/Password.\");\n              }\n            }\n          }}\n        >\n          {(props) => (\n            <form onSubmit={props.handleSubmit}>\n              <div>\n                <header className=\"App-header\">\n                  React Signup, Singin, Login, Logout features\n                </header>\n                <div>\n                  <div>\n                    <div className=\"logincontainer\">\n                      <label>\n                        <b>Username</b>\n                        <span className=\"error\">*</span>\n                        <span className=\"errorMsg\">\n                          {props.errors.userName &&\n                            props.touched.userName &&\n                            props.errors.userName}\n                        </span>\n                      </label>\n                      <input\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"userName\"\n                        name=\"userName\"\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                        value={props.values.userName}\n                      />\n\n                      <label>\n                        <b>Password</b>\n                        <span className=\"error\">*</span>\n                        <span className=\"errorMsg\">\n                          {props.errors.password &&\n                            props.touched.password &&\n                            props.errors.password}\n                        </span>\n                      </label>\n                      <input\n                        type=\"password\"\n                        className=\"form-control\"\n                        placeholder=\"password\"\n                        name=\"password\"\n                        onChange={props.handleChange}\n                        onBlur={props.handleBlur}\n                        value={props.values.password}\n                      />\n\n                      <button type=\"submit\">Log In</button>\n                      <Link to={\"/register\"}>Create Account</Link>\n                    </div>\n                  </div>\n\n                  {localStorage.getItem(props.values.userName) &&\n                  JSON.parse(localStorage.getItem(props.values.userName))\n                    .isUserLoggedIn ? (\n                    <Redirect\n                      to={{\n                        pathname: \"/dashboard\",\n                        state: { userName: props.values.userName },\n                      }}\n                    />\n                  ) : null}\n                </div>\n                <ToastsContainer\n                  store={ToastsStore}\n                  position={ToastsContainerPosition.TOP_RIGHT}\n                />\n              </div>\n            </form>\n          )}\n        </Formik>\n      </div>\n    );\n  }\n}\nexport default LogIn;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport \"./DashBoard.css\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\nconst _ = require(\"lodash\");\n\nclass DashBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: this.props.name,\n      board: [],\n      boardItem: \"\",\n      toggle: false,\n      submit: true,\n      change: true,\n      loggedInUserObj: {},\n    };\n  }\n\n  onLogoutYes = () => {\n    this.setState({ submit: false });\n    this.setState({ toggle: true });\n    const userObj = JSON.parse(\n      localStorage.getItem(_.get(this.state.loggedInUserObj, \"userName\", \"\"))\n    );\n    userObj.isUserLoggedIn = false;\n    localStorage.setItem(\n      _.get(this.state.loggedInUserObj, \"userName\", \"\"),\n      JSON.stringify(userObj)\n    );\n  };\n\n  onLogout = () => {\n    confirmAlert({\n      title: \"Confirm to submit\",\n      message: \"Are you sure to do this.\",\n      buttons: [\n        {\n          label: \"Yes\",\n          onClick: () => this.onLogoutYes(),\n        },\n        {\n          label: \"No\",\n          onClick: () => alert(\"Click No\"),\n        },\n      ],\n    });\n  };\n\n  componentDidMount() {\n    const loggedInUserName = _.get(this.props.location, \"state.userName\", {});\n    this.setState({\n      loggedInUserObj: JSON.parse(localStorage.getItem(loggedInUserName)),\n    });\n  }\n\n  render() {\n    const localUname = `${_.get(\n      this.state.loggedInUserObj,\n      \"firstName\",\n      \"\"\n    )} ${_.get(this.state.loggedInUserObj, \"lastName\", \"\")}`;\n\n    return (\n      <div>\n        <span className=\"logout\">\n          <h2>HELLO {localUname}</h2>\n        </span>\n        <span className=\"HelloUser\">\n          <button\n            onClick={this.onLogout}\n            style={{\n              backgroundColor: \"61dafb\",\n              color: \"#282c34\",\n              float: \"right\",\n            }}\n            className=\"LogoutBtn\"\n          >\n            LOGOUT\n          </button>\n        </span>\n\n        {!this.state.submit ? <Redirect to={`/`} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default DashBoard;\n","import React from \"react\";\nimport \"./Register.css\";\nimport { Link } from \"react-router-dom\";\nimport { Formik } from \"formik\";\nimport {\n  ToastsContainer,\n  ToastsStore,\n  ToastsContainerPosition,\n} from \"react-toasts\";\nimport base64 from \"react-native-base64\";\nimport { validateName, validatePassword } from \"../../validations/validations\";\n\nclass Register extends React.Component {\n  render() {\n    return (\n      <div>\n        <Formik\n          initialValues={{\n            firstName: \"\",\n            lastName: \"\",\n            userName: \"\",\n            password: \"\",\n          }}\n          validate={(values) => {\n            const errors = {};\n\n            errors.firstName =\n              validateName(values.firstName, \"First Name\") || null;\n            errors.lastName =\n              validateName(values.lastName, \"Last Name\") || null;\n            errors.userName =\n              validateName(values.userName, \"User Name\") || null;\n            errors.password = validatePassword(values.password) || null;\n\n            for (var key in errors) {\n              if (errors[key] !== null) return errors;\n            }\n            return true;\n          }}\n          onSubmit={(values, actions) => {\n            actions.setSubmitting(false);\n\n            if (!localStorage.getItem(values.userName)) {\n              localStorage.setItem(\n                values.userName,\n                JSON.stringify({\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  userName: values.userName,\n                  password: base64.encode(values.password),\n                  isUserLoggedIn: false,\n                })\n              );\n\n              ToastsStore.success(\"User registered successfully.\");\n              actions.resetForm();\n            } else {\n              ToastsStore.error(\"Username is already exists.\");\n            }\n          }}\n        >\n          {(props) => (\n            <form onSubmit={props.handleSubmit}>\n              <div>\n                <div className=\"registercontainer\">\n                  <h1>Register</h1>\n                  <p>Please fill in this form to create an account.</p>\n                  <hr />\n\n                  <label>\n                    <b>First Name</b>\n                    <span className=\"error\">*</span>\n                    <span className=\"errorMsg\">\n                      {props.errors.firstName &&\n                        props.touched.firstName &&\n                        props.errors.firstName}\n                    </span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter First Name\"\n                    name=\"firstName\"\n                    onChange={props.handleChange}\n                    onBlur={props.handleBlur}\n                    value={props.values.firstName}\n                  />\n\n                  <label>\n                    <b>Last Name</b>\n                    <span className=\"error\">*</span>\n                    <span className=\"errorMsg\">\n                      {props.errors.lastName &&\n                        props.touched.lastName &&\n                        props.errors.lastName}\n                    </span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter Last Name\"\n                    name=\"lastName\"\n                    onChange={props.handleChange}\n                    onBlur={props.handleBlur}\n                    value={props.values.lastName}\n                  />\n\n                  <label>\n                    <b>User Name</b>\n                    <span className=\"error\">*</span>\n                    <span className=\"errorMsg\">\n                      {props.errors.userName &&\n                        props.touched.userName &&\n                        props.errors.userName}\n                    </span>\n                  </label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter User Name\"\n                    name=\"userName\"\n                    onChange={props.handleChange}\n                    onBlur={props.handleBlur}\n                    value={props.values.userName}\n                  />\n\n                  <label>\n                    <b>Password</b>\n                    <span className=\"error\">*</span>\n                    <span className=\"errorMsg\">\n                      {props.errors.password &&\n                        props.touched.password &&\n                        props.errors.password}\n                    </span>\n                  </label>\n                  <input\n                    type=\"password\"\n                    placeholder=\"Repeat Password\"\n                    name=\"password\"\n                    onChange={props.handleChange}\n                    onBlur={props.handleBlur}\n                    value={props.values.password}\n                  />\n\n                  <button\n                    type=\"submit\"\n                    className=\"registerbtn\"\n                    disabled={false}\n                  >\n                    Register\n                  </button>\n                </div>\n                <div className=\"signin\">\n                  <p>\n                    Already have an account? <Link to={\"/\"}>Sign In</Link>\n                  </p>\n                </div>\n              </div>\n            </form>\n          )}\n        </Formik>\n        <ToastsContainer\n          store={ToastsStore}\n          position={ToastsContainerPosition.TOP_RIGHT}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport _ from \"lodash\";\n\nfunction requireAuth(userNameKey) {\n  return JSON.parse(localStorage.getItem(userNameKey)).isUserLoggedIn;\n}\n\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (\n          _.get(props.location, \"state.userName\") &&\n          requireAuth(props.location.state.userName)\n        ) {\n          return <Component {...props} />;\n        } else {\n          return (\n            <Redirect\n              to={{\n                pathname: \"/\",\n              }}\n            />\n          );\n        }\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport LogIn from \"./components/Login/LogIn\";\nimport DashBoard from \"./components/DashBoard/DashBoard\";\nimport Register from \"./components/Register/Register\";\nimport { ProtectedRoute } from \"./ProtectedRoute\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={LogIn} />\n        <Route path=\"/register\" exact component={Register} />\n        <ProtectedRoute exact path=\"/dashboard\" component={DashBoard} />\n        <Route path=\"*\" component={() => \"404 Not Found\"} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nconst app = (<BrowserRouter>\n    <App></App>\n</BrowserRouter>)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}